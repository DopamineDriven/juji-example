/* 214c9863de73b3425fa9dbe2f940843908f1c398
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer: User;
  viewerRemote: Array<Maybe<UserRemote>>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type UserRemote = {
  __typename?: 'UserRemote';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);

export type PartialRemoteFragment = (
  { __typename?: 'UserRemote' }
  & Pick<UserRemote, 'id' | 'name'>
);

export const PartialFragmentDoc = gql`
    fragment Partial on User {
  id
  name
}
    `;
export const PartialRemoteFragmentDoc = gql`
    fragment PartialRemote on UserRemote {
  id
  name
}
    `;