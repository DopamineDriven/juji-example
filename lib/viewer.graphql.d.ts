/* c60fd450ddf38d45c05e0288187d4138ef3d6874
 * This file is automatically generated by graphql-let. */

import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer: User;
    viewerRemote: Array<Maybe<UserRemote>>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type UserRemote = {
    __typename?: 'UserRemote';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer: ({
        __typename?: 'User';
    } & Pick<User, 'status'> & PartialFragment);
});
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<User, 'id' | 'name'>);
export declare type ViewerRemoteQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type ViewerRemoteQuery = ({
    __typename?: 'Query';
} & {
    viewerRemote: Array<Maybe<({
        __typename?: 'UserRemote';
    } & Pick<UserRemote, 'status'> & PartialRemoteFragment)>>;
});
export declare type PartialRemoteFragment = ({
    __typename?: 'UserRemote';
} & Pick<UserRemote, 'id' | 'name'>);
export declare const PartialFragmentDoc: ApolloReactCommon.DocumentNode;
export declare const PartialRemoteFragmentDoc: ApolloReactCommon.DocumentNode;
export declare const ViewerDocument: ApolloReactCommon.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): ApolloReactCommon.QueryResult<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): ApolloReactCommon.QueryTuple<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = ApolloReactCommon.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare const ViewerRemoteDocument: ApolloReactCommon.DocumentNode;
/**
 * __useViewerRemoteQuery__
 *
 * To run a query within a React component, call `useViewerRemoteQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerRemoteQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerRemoteQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerRemoteQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewerRemoteQuery, ViewerRemoteQueryVariables>): ApolloReactCommon.QueryResult<ViewerRemoteQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useViewerRemoteLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewerRemoteQuery, ViewerRemoteQueryVariables>): ApolloReactCommon.QueryTuple<ViewerRemoteQuery, Exact<{
    [key: string]: never;
}>>;
export declare type ViewerRemoteQueryHookResult = ReturnType<typeof useViewerRemoteQuery>;
export declare type ViewerRemoteLazyQueryHookResult = ReturnType<typeof useViewerRemoteLazyQuery>;
export declare type ViewerRemoteQueryResult = ApolloReactCommon.QueryResult<ViewerRemoteQuery, ViewerRemoteQueryVariables>;
